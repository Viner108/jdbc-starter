package com.dmdev.jdbc.starter;

import com.dmdev.jdbc.starter.until.ConnectionManager;
import org.postgresql.Driver;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

public class JdbcRunner {
    public static void main(String[] args) throws SQLException {
//        Long cost = 200L;
//        List<Long> result = getTicketsByCost(cost);
//        System.out.println(result);
        checkMetaData();
    }

    private static void checkMetaData() throws SQLException {
        try(Connection connection = ConnectionManager.open()){
            DatabaseMetaData metaData = connection.getMetaData();
            ResultSet catalogs = metaData.getCatalogs();
            while (catalogs.next()){
                String catalog = catalogs.getString(1);
                ResultSet schemas = metaData.getSchemas();
                while (schemas.next()){
                    String schema = schemas.getString("TABLE_SCHEM");
                    ResultSet tables = metaData.getTables(catalog, schema, "%", new String[]{"TABLE"});
                    if(schema.equals("public")) {
                        while (tables.next()) {
                            System.out.println(tables.getString("TABLE_NAME"));
                            ResultSet columns = metaData.getColumns(catalog, schema, "%", null);
                            while (columns.next()){
                                System.out.println(columns.getString("COLUMN_NAME"));
                            }
                        }
                    }
                }
            }
        }
    }
    private static List<Long> getTicketsByCost(Long cost) throws SQLException{
        String sql= """
                SELECT id
                from ticket
                where cost > ?
                """;
        List<Long> result = new ArrayList<>();
        try (Connection connection = ConnectionManager.open();
        PreparedStatement prepareStatement = connection.prepareStatement(sql)){
            prepareStatement.setLong(1,cost);
            ResultSet resultSet=prepareStatement.executeQuery();
            prepareStatement.setFetchSize(50);
            prepareStatement.setQueryTimeout(10);
            prepareStatement.setMaxRows(100);
            while (resultSet.next()){
                result.add(resultSet.getObject("id",Long.class));
            }
        }
        return result;
    }

    private static void test() throws SQLException {
        Class<Driver> driverClass = Driver.class;
        String sql = """
                INSERT into info(data)
                values 
                ('autogenerated')
                """;
        try (Connection connection = ConnectionManager.open();
             Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
             ) {
            System.out.println(connection.getSchema());
            System.out.println(connection.getTransactionIsolation());
            int executeResult = statement.executeUpdate(sql,Statement.RETURN_GENERATED_KEYS);
            ResultSet resultSet = statement.getGeneratedKeys();
            if(resultSet.next()){
                int generatedId = resultSet.getInt("id");
                System.out.println(generatedId);
            }

        }
    }
}